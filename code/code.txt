"use client"
import React, { useState, useEffect } from 'react';
import * as Realm from 'realm-web';
import Image from 'next/image';
import AddToCartModal from '@/components/modal/AddToCartModal';
import LoadingSpinner from '@/components/LoadingSpinner';
import Link from 'next/link';

const UserCart = () => {
  const [products, setProducts] = useState([]);
  const [id, setId] = useState('');
  const [showModal, setShowModal] = useState(false);
  const [selectedProductCode, setSelectedProductCode] = useState('');
  const [loading, setLoading] = useState(true);
  const [loadingButtons, setLoadingButtons] = useState([]);

  useEffect(() => {
    async function fetchData() {
      const REALM_APP_ID = process.env.NEXT_PUBLIC_REALM_APP_ID;
      const app = new Realm.App({ id: REALM_APP_ID });

      try {
        const functionName = 'MyCart';
        const userId = app.currentUser.id;
        const result = await app.currentUser.callFunction(functionName);
        console.log(result)
        setProducts(result);
        setId(userId);
        setLoadingButtons(Array(result.length).fill(false));
      } catch (error) {
        console.error('Error:', error);
      } finally {
        setLoading(false);
      }
    }

    fetchData();
  }, []);

  const handleBill = async (productCode, index) => {
    const REALM_APP_ID = process.env.NEXT_PUBLIC_REALM_APP_ID;
    const app = new Realm.App({ id: REALM_APP_ID });
    const args = [productCode, app.currentUser.id];
    const functionName = 'CreateBill';

    try {
      setLoadingButtons((prevLoadingButtons) => {
        const newLoadingButtons = [...prevLoadingButtons];
        newLoadingButtons[index] = true;
        return newLoadingButtons;
      });

      const response = await app.currentUser.callFunction(functionName, ...args);
      setShowModal(true);
      setSelectedProductCode(response);
    } catch (error) {
      console.error('Error adding to cart:', error);
    } finally {
      setLoadingButtons((prevLoadingButtons) => {
        const newLoadingButtons = [...prevLoadingButtons];
        newLoadingButtons[index] = false;
        return newLoadingButtons;
      });
    }
  };

  const closeModal = () => {
    setShowModal(false);
    setSelectedProductCode('');
  };
  return (
    <div>
    <h1>Your Cart</h1>
    {loading ? (
      <LoadingSpinner /> // Show a loading spinner while data is being fetched
    ) : products.length === 0 ? (
      <p>Your cart is empty</p> // Display a message if the cart is empty
    ) : (
      <div>
        {products.map((cartItem, index) => (
          <div key={index}>
            <Image src={cartItem.image} alt={cartItem.name} width={100} height={100} />
            <p>Quantity: {Math.min(cartItem.quantity, cartItem.countInStock)}</p>
          </div>
        ))}
      </div>
    )}
    {showModal && (
      <AddToCartModal
        productCode={selectedProductCode}
        closeModal={closeModal}
      />
    )}
  </div>
  );
  
}

export default UserCart